name: cmake --build
on:
  push:
    branches: ["master"]
    paths-ignore:
      - .gitignore
      - LICENSE
      - README.md
      - .github/**
      - "!.github/workflows/cmake-build.yml"
  pull_request:
    paths-ignore:
      - .gitignore
      - LICENSE
      - README.md
      - .github/**
      - "!.github/workflows/cmake-build.yml"
  workflow_call:
concurrency:
  # When run via `workflow_call` the `github.workflow` and `github.ref` are the
  # same as the parent so we need a differentiation suffix.
  group: ${{ github.workflow }}-${{ github.ref }}-cmake-build
  cancel-in-progress: true
jobs:
  cmake-build:
    strategy:
      fail-fast: false
      matrix:
        # https://gist.github.com/jcbhmr/ff6abde60ae32de0e33f93ed7445e78e
        include:
          - { os: ubuntu-latest, cmake-system-name: Linux, cmake-system-processor: x86_64, target: x86_64-unknown-linux-gnu }
          - { os: ubuntu-latest, cmake-system-name: Linux, cmake-system-processor: x86_64, target: x86_64-unknown-linux-musl }
          - { os: ubuntu-latest, cmake-system-name: Linux, cmake-system-processor: aarch64, target: aarch64-unknown-linux-gnu }
          - { os: ubuntu-latest, cmake-system-name: Linux, cmake-system-processor: aarch64, target: aarch64-unknown-linux-musl }
          - { os: macos-latest, cmake-system-name: Darwin, cmake-system-processor: aarch64, target: aarch64-apple-darwin }
          - { os: macos-13, cmake-system-name: Darwin, cmake-system-processor: x86_64, target: x86_64-apple-darwin }
          - { os: windows-latest, cmake-system-name: Windows, cmake-system-processor: x86_64, target: x86_64-pc-windows-msvc }
          - { os: windows-latest, cmake-system-name: Windows, cmake-system-processor: x86_64, target: x86_64-pc-windows-gnu }
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: jwlawson/actions-setup-cmake@v2
      - uses: goto-bus-stop/setup-zig@v2
      # https://jcbhmr.me/blog/zig-cc-cmake
      - run: |
          mkdir -p ~/.local/bin
          echo 'exec zig ar "$@"' > ~/.local/bin/zig-ar
          chmod +x ~/.local/bin/zig-ar
          echo '@zig ar %*' > ~/.local/bin/zig-ar.cmd
          echo 'exec zig ranlib "$@"' > ~/.local/bin/zig-ranlib
          chmod +x ~/.local/bin/zig-ranlib
          echo '@zig ranlib %*' > ~/.local/bin/zig-ranlib.cmd
      - run: |
          ASM='zig cc'
          CC='zig cc' \
          CXX='zig c++' \
          cmake \
            -DCMAKE_SYSTEM_NAME='${{ matrix.cmake-system-name }}' \
            -DCMAKE_SYSTEM_PROCESSOR='${{ matrix.cmake-system-processor }}' \
            -DCMAKE_ASM_COMPILER_TARGET='${{ matrix.target }}' \
            -DCMAKE_C_COMPILER_TARGET='${{ matrix.target }}' \
            -DCMAKE_CXX_COMPILER_TARGET='${{ matrix.target }}' \
            -DCMAKE_AR="$HOME/.local/bin/zig-ar" \
            -DCMAKE_RANLIB="$HOME/.local/bin/zig-ranlib" \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_STATIC_CURL=ON \
            -B build
      - run: cmake --build build
      # Prefer CPack but curl doesn't use CPack.
      - run: cmake --install build --prefix stage
      - uses: actions/upload-artifact@v4
        with:
          name: curl-${{ matrix.target }}
          path: stage