# Copyright (C) Jacob Hummer
#
# SPDX-License-Identifier: curl

name: cmake --build
on:
  push:
    branches: ["master"]
    paths-ignore:
      - .*
      - .*/**
      - buildconf*
      - CHANGES
      - COPYING
      - GIT-INFO.md
      - README*
      - RELEASE-NOTES
      - renovate.json
      - SECURITY.md
      - LICENSES/**
      - docs/**
      - "!.github/workflows/cmake-build.yml"
  pull_request:
    paths-ignore:
      - .*
      - .*/**
      - buildconf*
      - CHANGES
      - COPYING
      - GIT-INFO.md
      - README*
      - RELEASE-NOTES
      - renovate.json
      - SECURITY.md
      - LICENSES/**
      - docs/**
      - "!.github/workflows/cmake-build.yml"
  workflow_call:
concurrency:
  # When run via `workflow_call` the `github.workflow` and `github.ref` are the
  # same as the parent so we need a differentiation suffix.
  group: ${{ github.workflow }}-${{ github.ref }}-cmake-build
  cancel-in-progress: true
jobs:
  cmake-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-20.04, target: x86_64-unknown-linux-gnu }
          - { os: macos-13, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: jwlawson/actions-setup-cmake@v2
      - run: |
          cmake \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_STATIC_CURL=ON \
            -B build
      - run: cmake --build build --config RelWithDebInfo
      - run: tree -Ca build
      # TODO: Use CPack
      - run: cmake --install build --prefix stage
      - run: tree -Ca stage
      - uses: actions/upload-artifact@v4
        with:
          name: curl-${{ matrix.target }}
          path: stage
  cmake-build-unknown-unknown-cosmo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jwlawson/actions-setup-cmake@v2
      - run: |
          cd ~
          mkdir -p cosmocc
          cd cosmocc
          wget https://cosmo.zip/pub/cosmocc/cosmocc.zip
          unzip cosmocc.zip
          echo "$HOME/cosmocc/bin" >> "$GITHUB_PATH"
          sudo wget -O /usr/bin/ape https://cosmo.zip/pub/cosmos/bin/ape-$(uname -m).elf
          sudo chmod +x /usr/bin/ape
          sudo sh -c "echo ':APE:M::MZqFpD::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register"
          sudo sh -c "echo ':APE-jart:M::jartsr::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register"
      - shell: cp {0} ./cosmocc-override.cmake
        run: |
          set(CMAKE_ASM_OUTPUT_EXTENSION .o)
          set(CMAKE_C_OUTPUT_EXTENSION .o)
          set(CMAKE_CXX_OUTPUT_EXTENSION .o)
      - run: |
          ASM="cosmocc" \
          CC="cosmocc" \
          CXX="cosmoc++" \
          cmake \
            -DCMAKE_SYSTEM_NAME="Generic" \
            -DCMAKE_SYSTEM_PROCESSOR="" \
            -DCMAKE_USER_MAKE_RULES_OVERRIDE="$PWD/cosmocc-override.cmake" \
            -DCMAKE_AR="$(command -v cosmoar)" \
            -DCMAKE_RANLIB="" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_STATIC_CURL=ON \
            -B build
      - run: cmake --build build --config RelWithDebInfo
      - run: tree -Ca build
      # TODO: Use CPack
      - run: cmake --install build --prefix stage
      - run: tree -Ca stage
      - uses: actions/upload-artifact@v4
        with:
          name: curl-unknown-unknown-cosmo
          path: stage